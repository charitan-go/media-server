// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/charitan-go/media-server/ent/predicate"
	"github.com/charitan-go/media-server/ent/media"
	"github.com/charitan-go/media-server/internal/media/dto"
	"github.com/google/uuid"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (pu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetReadableID sets the "readable_id" field.
func (pu *MediaUpdate) SetReadableID(u uuid.UUID) *MediaUpdate {
	pu.mutation.SetReadableID(u)
	return pu
}

// SetNillableReadableID sets the "readable_id" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableReadableID(u *uuid.UUID) *MediaUpdate {
	if u != nil {
		pu.SetReadableID(*u)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *MediaUpdate) SetName(s string) *MediaUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableName(s *string) *MediaUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *MediaUpdate) SetDescription(s string) *MediaUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableDescription(s *string) *MediaUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetGoal sets the "goal" field.
func (pu *MediaUpdate) SetGoal(f float64) *MediaUpdate {
	pu.mutation.ResetGoal()
	pu.mutation.SetGoal(f)
	return pu
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableGoal(f *float64) *MediaUpdate {
	if f != nil {
		pu.SetGoal(*f)
	}
	return pu
}

// AddGoal adds f to the "goal" field.
func (pu *MediaUpdate) AddGoal(f float64) *MediaUpdate {
	pu.mutation.AddGoal(f)
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *MediaUpdate) SetStartDate(t time.Time) *MediaUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableStartDate(t *time.Time) *MediaUpdate {
	if t != nil {
		pu.SetStartDate(*t)
	}
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *MediaUpdate) SetEndDate(t time.Time) *MediaUpdate {
	pu.mutation.SetEndDate(t)
	return pu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableEndDate(t *time.Time) *MediaUpdate {
	if t != nil {
		pu.SetEndDate(*t)
	}
	return pu
}

// SetCategory sets the "category" field.
func (pu *MediaUpdate) SetCategory(de dto.CategoryEnum) *MediaUpdate {
	pu.mutation.SetCategory(de)
	return pu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableCategory(de *dto.CategoryEnum) *MediaUpdate {
	if de != nil {
		pu.SetCategory(*de)
	}
	return pu
}

// SetCountryCode sets the "countryCode" field.
func (pu *MediaUpdate) SetCountryCode(s string) *MediaUpdate {
	pu.mutation.SetCountryCode(s)
	return pu
}

// SetNillableCountryCode sets the "countryCode" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableCountryCode(s *string) *MediaUpdate {
	if s != nil {
		pu.SetCountryCode(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *MediaUpdate) SetStatus(de dto.StatusEnum) *MediaUpdate {
	pu.mutation.SetStatus(de)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableStatus(de *dto.StatusEnum) *MediaUpdate {
	if de != nil {
		pu.SetStatus(*de)
	}
	return pu
}

// SetOwnerCharityReadableID sets the "owner_charity_readable_id" field.
func (pu *MediaUpdate) SetOwnerCharityReadableID(s string) *MediaUpdate {
	pu.mutation.SetOwnerCharityReadableID(s)
	return pu
}

// SetNillableOwnerCharityReadableID sets the "owner_charity_readable_id" field if the given value is not nil.
func (pu *MediaUpdate) SetNillableOwnerCharityReadableID(s *string) *MediaUpdate {
	if s != nil {
		pu.SetOwnerCharityReadableID(*s)
	}
	return pu
}

// Mutation returns the MediaMutation object of the builder.
func (pu *MediaUpdate) Mutation() *MediaMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *MediaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *MediaUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *MediaUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := media.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Media.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Goal(); ok {
		if err := media.GoalValidator(v); err != nil {
			return &ValidationError{Name: "goal", err: fmt.Errorf(`ent: validator failed for field "Media.goal": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Category(); ok {
		if err := media.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Media.category": %w`, err)}
		}
	}
	if v, ok := pu.mutation.CountryCode(); ok {
		if err := media.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "countryCode", err: fmt.Errorf(`ent: validator failed for field "Media.countryCode": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := media.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Media.status": %w`, err)}
		}
	}
	return nil
}

func (pu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ReadableID(); ok {
		_spec.SetField(media.FieldReadableID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(media.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.Goal(); ok {
		_spec.SetField(media.FieldGoal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedGoal(); ok {
		_spec.AddField(media.FieldGoal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.SetField(media.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.SetField(media.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Category(); ok {
		_spec.SetField(media.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.CountryCode(); ok {
		_spec.SetField(media.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(media.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.OwnerCharityReadableID(); ok {
		_spec.SetField(media.FieldOwnerCharityReadableID, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetReadableID sets the "readable_id" field.
func (puo *MediaUpdateOne) SetReadableID(u uuid.UUID) *MediaUpdateOne {
	puo.mutation.SetReadableID(u)
	return puo
}

// SetNillableReadableID sets the "readable_id" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableReadableID(u *uuid.UUID) *MediaUpdateOne {
	if u != nil {
		puo.SetReadableID(*u)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *MediaUpdateOne) SetName(s string) *MediaUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableName(s *string) *MediaUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *MediaUpdateOne) SetDescription(s string) *MediaUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableDescription(s *string) *MediaUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetGoal sets the "goal" field.
func (puo *MediaUpdateOne) SetGoal(f float64) *MediaUpdateOne {
	puo.mutation.ResetGoal()
	puo.mutation.SetGoal(f)
	return puo
}

// SetNillableGoal sets the "goal" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableGoal(f *float64) *MediaUpdateOne {
	if f != nil {
		puo.SetGoal(*f)
	}
	return puo
}

// AddGoal adds f to the "goal" field.
func (puo *MediaUpdateOne) AddGoal(f float64) *MediaUpdateOne {
	puo.mutation.AddGoal(f)
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *MediaUpdateOne) SetStartDate(t time.Time) *MediaUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableStartDate(t *time.Time) *MediaUpdateOne {
	if t != nil {
		puo.SetStartDate(*t)
	}
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *MediaUpdateOne) SetEndDate(t time.Time) *MediaUpdateOne {
	puo.mutation.SetEndDate(t)
	return puo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableEndDate(t *time.Time) *MediaUpdateOne {
	if t != nil {
		puo.SetEndDate(*t)
	}
	return puo
}

// SetCategory sets the "category" field.
func (puo *MediaUpdateOne) SetCategory(de dto.CategoryEnum) *MediaUpdateOne {
	puo.mutation.SetCategory(de)
	return puo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableCategory(de *dto.CategoryEnum) *MediaUpdateOne {
	if de != nil {
		puo.SetCategory(*de)
	}
	return puo
}

// SetCountryCode sets the "countryCode" field.
func (puo *MediaUpdateOne) SetCountryCode(s string) *MediaUpdateOne {
	puo.mutation.SetCountryCode(s)
	return puo
}

// SetNillableCountryCode sets the "countryCode" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableCountryCode(s *string) *MediaUpdateOne {
	if s != nil {
		puo.SetCountryCode(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *MediaUpdateOne) SetStatus(de dto.StatusEnum) *MediaUpdateOne {
	puo.mutation.SetStatus(de)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableStatus(de *dto.StatusEnum) *MediaUpdateOne {
	if de != nil {
		puo.SetStatus(*de)
	}
	return puo
}

// SetOwnerCharityReadableID sets the "owner_charity_readable_id" field.
func (puo *MediaUpdateOne) SetOwnerCharityReadableID(s string) *MediaUpdateOne {
	puo.mutation.SetOwnerCharityReadableID(s)
	return puo
}

// SetNillableOwnerCharityReadableID sets the "owner_charity_readable_id" field if the given value is not nil.
func (puo *MediaUpdateOne) SetNillableOwnerCharityReadableID(s *string) *MediaUpdateOne {
	if s != nil {
		puo.SetOwnerCharityReadableID(*s)
	}
	return puo
}

// Mutation returns the MediaMutation object of the builder.
func (puo *MediaUpdateOne) Mutation() *MediaMutation {
	return puo.mutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (puo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Media entity.
func (puo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *MediaUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := media.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Media.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Goal(); ok {
		if err := media.GoalValidator(v); err != nil {
			return &ValidationError{Name: "goal", err: fmt.Errorf(`ent: validator failed for field "Media.goal": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Category(); ok {
		if err := media.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Media.category": %w`, err)}
		}
	}
	if v, ok := puo.mutation.CountryCode(); ok {
		if err := media.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "countryCode", err: fmt.Errorf(`ent: validator failed for field "Media.countryCode": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := media.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Media.status": %w`, err)}
		}
	}
	return nil
}

func (puo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ReadableID(); ok {
		_spec.SetField(media.FieldReadableID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(media.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.Goal(); ok {
		_spec.SetField(media.FieldGoal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedGoal(); ok {
		_spec.AddField(media.FieldGoal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.SetField(media.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.SetField(media.FieldEndDate, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Category(); ok {
		_spec.SetField(media.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.CountryCode(); ok {
		_spec.SetField(media.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(media.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.OwnerCharityReadableID(); ok {
		_spec.SetField(media.FieldOwnerCharityReadableID, field.TypeString, value)
	}
	_node = &Media{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
