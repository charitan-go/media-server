// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/charitan-go/media-server/ent/media"
	"github.com/charitan-go/media-server/internal/media/dto"
	"github.com/google/uuid"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation *MediaMutation
	hooks    []Hook
}

// SetReadableID sets the "readable_id" field.
func (pc *MediaCreate) SetReadableID(u uuid.UUID) *MediaCreate {
	pc.mutation.SetReadableID(u)
	return pc
}

// SetNillableReadableID sets the "readable_id" field if the given value is not nil.
func (pc *MediaCreate) SetNillableReadableID(u *uuid.UUID) *MediaCreate {
	if u != nil {
		pc.SetReadableID(*u)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *MediaCreate) SetName(s string) *MediaCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *MediaCreate) SetDescription(s string) *MediaCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *MediaCreate) SetNillableDescription(s *string) *MediaCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetGoal sets the "goal" field.
func (pc *MediaCreate) SetGoal(f float64) *MediaCreate {
	pc.mutation.SetGoal(f)
	return pc
}

// SetStartDate sets the "start_date" field.
func (pc *MediaCreate) SetStartDate(t time.Time) *MediaCreate {
	pc.mutation.SetStartDate(t)
	return pc
}

// SetEndDate sets the "end_date" field.
func (pc *MediaCreate) SetEndDate(t time.Time) *MediaCreate {
	pc.mutation.SetEndDate(t)
	return pc
}

// SetCategory sets the "category" field.
func (pc *MediaCreate) SetCategory(de dto.CategoryEnum) *MediaCreate {
	pc.mutation.SetCategory(de)
	return pc
}

// SetCountryCode sets the "countryCode" field.
func (pc *MediaCreate) SetCountryCode(s string) *MediaCreate {
	pc.mutation.SetCountryCode(s)
	return pc
}

// SetStatus sets the "status" field.
func (pc *MediaCreate) SetStatus(de dto.StatusEnum) *MediaCreate {
	pc.mutation.SetStatus(de)
	return pc
}

// SetOwnerCharityReadableID sets the "owner_charity_readable_id" field.
func (pc *MediaCreate) SetOwnerCharityReadableID(s string) *MediaCreate {
	pc.mutation.SetOwnerCharityReadableID(s)
	return pc
}

// SetID sets the "id" field.
func (pc *MediaCreate) SetID(u uuid.UUID) *MediaCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *MediaCreate) SetNillableID(u *uuid.UUID) *MediaCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the MediaMutation object of the builder.
func (pc *MediaCreate) Mutation() *MediaMutation {
	return pc.mutation
}

// Save creates the Media in the database.
func (pc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *MediaCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *MediaCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *MediaCreate) defaults() {
	if _, ok := pc.mutation.ReadableID(); !ok {
		v := media.DefaultReadableID()
		pc.mutation.SetReadableID(v)
	}
	if _, ok := pc.mutation.Description(); !ok {
		v := media.DefaultDescription
		pc.mutation.SetDescription(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := media.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *MediaCreate) check() error {
	if _, ok := pc.mutation.ReadableID(); !ok {
		return &ValidationError{Name: "readable_id", err: errors.New(`ent: missing required field "Media.readable_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Media.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := media.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Media.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Media.description"`)}
	}
	if _, ok := pc.mutation.Goal(); !ok {
		return &ValidationError{Name: "goal", err: errors.New(`ent: missing required field "Media.goal"`)}
	}
	if v, ok := pc.mutation.Goal(); ok {
		if err := media.GoalValidator(v); err != nil {
			return &ValidationError{Name: "goal", err: fmt.Errorf(`ent: validator failed for field "Media.goal": %w`, err)}
		}
	}
	if _, ok := pc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Media.start_date"`)}
	}
	if _, ok := pc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Media.end_date"`)}
	}
	if _, ok := pc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Media.category"`)}
	}
	if v, ok := pc.mutation.Category(); ok {
		if err := media.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Media.category": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "countryCode", err: errors.New(`ent: missing required field "Media.countryCode"`)}
	}
	if v, ok := pc.mutation.CountryCode(); ok {
		if err := media.CountryCodeValidator(v); err != nil {
			return &ValidationError{Name: "countryCode", err: fmt.Errorf(`ent: validator failed for field "Media.countryCode": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Media.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := media.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Media.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.OwnerCharityReadableID(); !ok {
		return &ValidationError{Name: "owner_charity_readable_id", err: errors.New(`ent: missing required field "Media.owner_charity_readable_id"`)}
	}
	return nil
}

func (pc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(media.Table, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.ReadableID(); ok {
		_spec.SetField(media.FieldReadableID, field.TypeUUID, value)
		_node.ReadableID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(media.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Goal(); ok {
		_spec.SetField(media.FieldGoal, field.TypeFloat64, value)
		_node.Goal = value
	}
	if value, ok := pc.mutation.StartDate(); ok {
		_spec.SetField(media.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := pc.mutation.EndDate(); ok {
		_spec.SetField(media.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := pc.mutation.Category(); ok {
		_spec.SetField(media.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := pc.mutation.CountryCode(); ok {
		_spec.SetField(media.FieldCountryCode, field.TypeString, value)
		_node.CountryCode = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(media.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.OwnerCharityReadableID(); ok {
		_spec.SetField(media.FieldOwnerCharityReadableID, field.TypeString, value)
		_node.OwnerCharityReadableID = value
	}
	return _node, _spec
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	err      error
	builders []*MediaCreate
}

// Save creates the Media entities in the database.
func (pcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Media, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *MediaCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *MediaCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
