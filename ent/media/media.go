// Code generated by ent, DO NOT EDIT.

package media

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/charitan-go/media-server/internal/media/dto"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the media type in the database.
	Label = "media"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReadableID holds the string denoting the readable_id field in the database.
	FieldReadableID = "readable_id"
	// FieldMediaType holds the string denoting the media_type field in the database.
	FieldMediaType = "media_type"
	// FieldProjectID holds the string denoting the project_id field in the database.
	FieldProjectID = "project_id"
	// Table holds the table name of the media in the database.
	Table = "media"
)

// Columns holds all SQL columns for media fields.
var Columns = []string{
	FieldID,
	FieldReadableID,
	FieldMediaType,
	FieldProjectID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReadableID holds the default value on creation for the "readable_id" field.
	DefaultReadableID func() uuid.UUID
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// MediaTypeValidator is a validator for the "media_type" field enum values. It is called by the builders before save.
func MediaTypeValidator(mt dto.MediaTypeEnum) error {
	switch mt {
	case "IMAGE", "VIDEO":
		return nil
	default:
		return fmt.Errorf("media: invalid enum value for media_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the Media queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByReadableID orders the results by the readable_id field.
func ByReadableID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadableID, opts...).ToFunc()
}

// ByMediaType orders the results by the media_type field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByProjectID orders the results by the project_id field.
func ByProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProjectID, opts...).ToFunc()
}
