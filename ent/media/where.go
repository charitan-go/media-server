// Code generated by ent, DO NOT EDIT.

package media

import (
	"entgo.io/ent/dialect/sql"
	"github.com/charitan-go/media-server/ent/predicate"
	"github.com/charitan-go/media-server/internal/media/dto"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldID, id))
}

// ReadableID applies equality check predicate on the "readable_id" field. It's identical to ReadableIDEQ.
func ReadableID(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldReadableID, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v string) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldProjectID, v))
}

// ReadableIDEQ applies the EQ predicate on the "readable_id" field.
func ReadableIDEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldReadableID, v))
}

// ReadableIDNEQ applies the NEQ predicate on the "readable_id" field.
func ReadableIDNEQ(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldReadableID, v))
}

// ReadableIDIn applies the In predicate on the "readable_id" field.
func ReadableIDIn(vs ...uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldReadableID, vs...))
}

// ReadableIDNotIn applies the NotIn predicate on the "readable_id" field.
func ReadableIDNotIn(vs ...uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldReadableID, vs...))
}

// ReadableIDGT applies the GT predicate on the "readable_id" field.
func ReadableIDGT(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldReadableID, v))
}

// ReadableIDGTE applies the GTE predicate on the "readable_id" field.
func ReadableIDGTE(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldReadableID, v))
}

// ReadableIDLT applies the LT predicate on the "readable_id" field.
func ReadableIDLT(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldReadableID, v))
}

// ReadableIDLTE applies the LTE predicate on the "readable_id" field.
func ReadableIDLTE(v uuid.UUID) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldReadableID, v))
}

// MediaTypeEQ applies the EQ predicate on the "media_type" field.
func MediaTypeEQ(v dto.MediaTypeEnum) predicate.Media {
	vc := v
	return predicate.Media(sql.FieldEQ(FieldMediaType, vc))
}

// MediaTypeNEQ applies the NEQ predicate on the "media_type" field.
func MediaTypeNEQ(v dto.MediaTypeEnum) predicate.Media {
	vc := v
	return predicate.Media(sql.FieldNEQ(FieldMediaType, vc))
}

// MediaTypeIn applies the In predicate on the "media_type" field.
func MediaTypeIn(vs ...dto.MediaTypeEnum) predicate.Media {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(sql.FieldIn(FieldMediaType, v...))
}

// MediaTypeNotIn applies the NotIn predicate on the "media_type" field.
func MediaTypeNotIn(vs ...dto.MediaTypeEnum) predicate.Media {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Media(sql.FieldNotIn(FieldMediaType, v...))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v string) predicate.Media {
	return predicate.Media(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v string) predicate.Media {
	return predicate.Media(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...string) predicate.Media {
	return predicate.Media(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...string) predicate.Media {
	return predicate.Media(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v string) predicate.Media {
	return predicate.Media(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v string) predicate.Media {
	return predicate.Media(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v string) predicate.Media {
	return predicate.Media(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v string) predicate.Media {
	return predicate.Media(sql.FieldLTE(FieldProjectID, v))
}

// ProjectIDContains applies the Contains predicate on the "project_id" field.
func ProjectIDContains(v string) predicate.Media {
	return predicate.Media(sql.FieldContains(FieldProjectID, v))
}

// ProjectIDHasPrefix applies the HasPrefix predicate on the "project_id" field.
func ProjectIDHasPrefix(v string) predicate.Media {
	return predicate.Media(sql.FieldHasPrefix(FieldProjectID, v))
}

// ProjectIDHasSuffix applies the HasSuffix predicate on the "project_id" field.
func ProjectIDHasSuffix(v string) predicate.Media {
	return predicate.Media(sql.FieldHasSuffix(FieldProjectID, v))
}

// ProjectIDEqualFold applies the EqualFold predicate on the "project_id" field.
func ProjectIDEqualFold(v string) predicate.Media {
	return predicate.Media(sql.FieldEqualFold(FieldProjectID, v))
}

// ProjectIDContainsFold applies the ContainsFold predicate on the "project_id" field.
func ProjectIDContainsFold(v string) predicate.Media {
	return predicate.Media(sql.FieldContainsFold(FieldProjectID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Media) predicate.Media {
	return predicate.Media(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Media) predicate.Media {
	return predicate.Media(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Media) predicate.Media {
	return predicate.Media(sql.NotPredicates(p))
}
